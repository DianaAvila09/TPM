@model Entidades.ParamKpiTpm

@{
    var dx = ViewBag.dx;
    var def = ViewBag.de;
    var dem = ViewBag.dem;
    var det = ViewBag.det;

    var dt5x = ViewBag.t5x;
    var dt5Falla = ViewBag.t5falla;
    var top5mes = ViewBag.Top5Mes.ToString();
    var dateHoy = DateTime.Now.Millisecond;

}

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/jquery-ui-timepicker-addon.min.css" rel="stylesheet" />

<form asp-controller="KpiTpm" method="post" action="KpiEfic">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="container-fluid bg-success">

        <h4 class="btn-sm titu">@ViewBag.Message</h4>
            <div class="form-inline">
                <div class="col-md-7">
                    <div>
                        <div class="form-group">
                            @Html.Label("Periodo a consultar:  ")
                            @Html.Label("  Año:")
                            @Html.TextBoxFor(m => Model.AnioIni, new { @type = "number", @class = "form-control", @style = "width:90px" })
                            <div>
                                @Html.ValidationMessageFor(model => model.AnioIni, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @Html.Label("Mes:")
                        @Html.DropDownListFor(model => model.MesIni,
                                      new SelectList(Model.lstMesIni, "NumMes", "DescripEsp"),
                                      new { @class = "form-control", @style = "width:100px" })
                        @Html.ValidationMessageFor(model => model.MesIni, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.Label(" al   ")
                            @Html.Label("Año:")
                            @Html.TextBoxFor(m => Model.AnioFin, new { @type = "number", @class = "form-control", @style = "width:90px" })
                            <div>
                                @Html.ValidationMessageFor(model => model.AnioFin, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @Html.Label("Mes:")
                        @Html.DropDownListFor(model => model.MesFin,
                                      new SelectList(Model.lstMesFin, "NumMes", "DescripEsp"),
                                     new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MesFin, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group col-md-1 align-bottom">
                <button id="grafica" type="submit" class="btn btn-success btn-md" onclick="return mostrar_procesar();">
                    <span class="glyphicon glyphicon-list-alt"></span>Reporte
                </button>
                @*@Html.ActionLink("Excel", "ToExcel", "Reportes", new { @class = "btn btn-sm btn-success  glyphicon glyphicon-open-file", @style = "font-size:12pt" })*@
            </div>
    </div>
    <br />
    <div style="text-align:center ">
        <label class="btn-sm bg-primary titu">Gráfica de Eficiencia,  peridodo: @ViewBag.Periodo</label>
    </div>
    <br />
    <div class="row">

        <div class="col-md-6">
            <div id="Efic" style=" width:100%; min-height:450px;">
            </div>
        </div>
        <div class="col-md-5">
            <div id="Top5" style=" width:100%; min-height:450px;">
            </div>
        </div>

    </div>
</form>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Styles.Render("~/Content/Bootstrap-Select/css")

    <script src="~/Scripts/echarts.min.js?V1@{@dateHoy}"></script>

    <script>

        var dx =  @Html.Raw(Json.Encode(@dx));
        var def =  @Html.Raw(Json.Encode(@def));
        var dem =  @Html.Raw(Json.Encode(@dem));
        var det =  @Html.Raw(Json.Encode(@det));

        var dt5x =  @Html.Raw(Json.Encode(@dt5x));
        var dt5Falla =  @Html.Raw(Json.Encode(@dt5Falla));
        var DescripMes = '@top5mes';

    // si hay periodos a graficar
    // ESto es para que no muestre una grfica vacia al entrar a la pantalla
    if (dx != null)
    {
        // Grafica de cumplimiento
        var ChartEfic = echarts.init(document.getElementById('Efic'));
        var option = {

            // Fondo de la grafica
            backgroundColor: '#F5F5F5',
            title: {
                text: "Gráfica de Eficiencia" 
            },
            grid: {
                top: "20%"
            },
            // Datos a mostrar en el tooltip
            tooltip: {
                trigger: 'axis',
                //axisPointer: { type: 'cross'} ,
                    formatter: function(params) {
                        var returnData = "";
                        returnData += "Periodo: " + params[0].name + " </br>";
                        returnData += '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background:' + params[0].color + '"></span>';
                        returnData += params[0].seriesName + ":  " + params[0].value + "% </br>";
                        returnData += '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background:' + params[1].color + '"></span>';
                        returnData += params[1].seriesName + ":  " + params[1].value + "% </br>";
                        returnData += '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background:' + params[2].color + '"></span>';
                        returnData += params[2].seriesName + ":  " + params[2].value + "% </br>";
                        return returnData;
                    }
            },
            legend: {
                top: '10%'
            },
            // Valores del eje X
            xAxis: {
                data: dx,
                axisLabel: {
                    // Poniendo este valor en Cero, forza a poner todos los valores
                    interval: 0,
                    rotate: 45,
                    fontWeight: 'bold'
                }
            },
             // Valores del eje Y
            yAxis: [{
                type: "value",
                name: "% Efic.",
                axisLabel: {
                    formatter: "{value} %",
                    fontWeight: 'bold'
                }
            }],
            series: [
                {
                name: 'Cumplimiento',
                type: 'bar',
                data: def,
                    color: '#b5ff66',
                barWidth: '70%',
                // Formato de la etiqueta dentro de la barra
                label: {
                        show: true,
                        color: 'black',
                        //fontWeight: 'bold',
                        fontSize: 14,
                        rotate: 90,
                        formatter: function (params) {
                                        var returnData = '';
                                        // Se agrega condicion para que no muestre los valores en cero en las series
                                        if (params.value != 0) { returnData = params.value+ '%'; }
                                        return returnData;}
                        }
                },
                {
                    name: 'Meta',
                    type: 'line',
                    data: dem,
                    //showSymbol: false,
                    symbolSize: 5,
                    color: '#009900',
                    lineStyle: {
                        color: '#009900',
                        width: 3,
                        type: 'solid'
                    }
                },
                {
                    name: 'Tendencia',
                    type: 'line',
                    data: det,
                    showSymbol: false,
                    color: '#000000',
                    lineStyle: {
                        color: '#000000',
                        width: 3,
                        type: 'solid'
                    },
                }]
        };

        // Asignamos las opciones de la grafica al Objeto echarts
        ChartEfic.setOption(option);

        // Grafica de top5 de fallas
        var ChartTop5 = echarts.init(document.getElementById('Top5'));
        var optiont5 = {
            // Fondo de la grafica
            backgroundColor: '#F5F5F5',
            title: {
                text: "Top 5 Análisis de Pareto " + DescripMes
            },
            grid: {
                left: "30%",
                top: "20%"
            },
            // Datos a mostrar en el tooltip
            tooltip: {
                trigger: 'none'
            },
            legend: {
                show: false
            },
            // Valores del eje X
            xAxis: {
                name: "Núm. de Fallas",
                nameLocation: 'center',
                type: "value",
                axisLabel: {
                    //    // Poniendo este valor en Cero, forza a poner todos los valores
                    interval: 0,
                    //    //rotate: 45,
                    //    fontWeight: 'bold'
                },
                nameTextStyle:{ lineHeight: 45}
            },
            // Valores del eje Y
            yAxis: [{
                type: "category",
                name: "WorkCenter",
                data: dt5x,
                axisLabel: {              
                   fontWeight: 'bold'
                }
            }],
            series: [
                {
                    name: 'Fallas',
                    type: 'bar',
                    data: dt5Falla,
                    color: '#99cc00',
                    barWidth: '70%',
                    // Formato de la etiqueta dentro de la barra
                    label: {
                        show: true,
                        color: 'black',
                        //fontWeight: 'bold',
                        fontSize: 12,
                        //rotate: 90
                        //formatter: function (params) {
                        //    var returnData = '';
                        //    // Se agrega condicion para que no muestre los valores en cero en las series
                        //    if (params.value != 0) { returnData = params.value + '%'; }
                        //    return returnData;
                        //}
                    }
                }]
        };
        // Asignamos las opciones de la grafica al Objeto echarts
        ChartTop5.setOption(optiont5);

    }



    // Funcion para hacer responsive la grafica
    window.onresize = function () {
        ChartEfic.resize();
        ChartTop5.resize();
    }

    </script>
}